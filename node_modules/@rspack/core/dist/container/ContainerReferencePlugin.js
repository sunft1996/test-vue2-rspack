"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerReferencePlugin = void 0;
const base_1 = require("../builtin-plugin/base");
const ExternalsPlugin_1 = require("../builtin-plugin/ExternalsPlugin");
const options_1 = require("./options");
const ModuleFederationRuntimePlugin_1 = require("./ModuleFederationRuntimePlugin");
class ContainerReferencePlugin extends base_1.RspackBuiltinPlugin {
    constructor(options) {
        super();
        this.name = base_1.BuiltinPluginName.ContainerReferencePlugin;
        this._remotes = (0, options_1.parseOptions)(options.remotes, item => ({
            external: Array.isArray(item) ? item : [item],
            shareScope: options.shareScope || "default"
        }), item => ({
            external: Array.isArray(item.external)
                ? item.external
                : [item.external],
            shareScope: item.shareScope || options.shareScope || "default"
        }));
        this._options = {
            remoteType: options.remoteType,
            remotes: this._remotes.map(([key, r]) => ({ key, ...r }))
        };
    }
    raw(compiler) {
        const { remoteType } = this._options;
        const remoteExternals = {};
        for (const [key, config] of this._remotes) {
            let i = 0;
            for (const external of config.external) {
                if (external.startsWith("internal "))
                    continue;
                remoteExternals[`webpack/container/reference/${key}${i ? `/fallback-${i}` : ""}`] = external;
                i++;
            }
        }
        new ExternalsPlugin_1.ExternalsPlugin(remoteType, remoteExternals).apply(compiler);
        ModuleFederationRuntimePlugin_1.ModuleFederationRuntimePlugin.addPlugin(compiler, require.resolve("../sharing/initializeSharing.js"));
        ModuleFederationRuntimePlugin_1.ModuleFederationRuntimePlugin.addPlugin(compiler, require.resolve("./remotesLoading.js"));
        return {
            name: this.name,
            options: this._options
        };
    }
}
exports.ContainerReferencePlugin = ContainerReferencePlugin;
