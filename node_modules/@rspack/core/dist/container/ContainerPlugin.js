"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerPlugin = void 0;
const base_1 = require("../builtin-plugin/base");
const config_1 = require("../config");
const util_1 = require("../util");
const options_1 = require("../container/options");
const ModuleFederationRuntimePlugin_1 = require("./ModuleFederationRuntimePlugin");
class ContainerPlugin extends base_1.RspackBuiltinPlugin {
    constructor(options) {
        super();
        this.name = base_1.BuiltinPluginName.ContainerPlugin;
        const library = (this._library = options.library || {
            type: "var",
            name: options.name
        });
        const runtime = options.runtime;
        this._options = {
            name: options.name,
            shareScope: options.shareScope || "default",
            library: (0, config_1.getRawLibrary)(library),
            runtime: !(0, util_1.isNil)(runtime) ? (0, config_1.getRawEntryRuntime)(runtime) : undefined,
            filename: options.filename,
            exposes: (0, options_1.parseOptions)(options.exposes, item => ({
                import: Array.isArray(item) ? item : [item],
                name: undefined
            }), item => ({
                import: Array.isArray(item.import) ? item.import : [item.import],
                name: item.name || undefined
            })).map(([key, r]) => ({ key, ...r }))
        };
    }
    raw(compiler) {
        const library = this._library;
        if (!compiler.options.output.enabledLibraryTypes.includes(library.type)) {
            compiler.options.output.enabledLibraryTypes.push(library.type);
        }
        ModuleFederationRuntimePlugin_1.ModuleFederationRuntimePlugin.addPlugin(compiler, require.resolve("../sharing/initializeSharing.js"));
        return {
            name: this.name,
            options: this._options
        };
    }
}
exports.ContainerPlugin = ContainerPlugin;
