"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvideSharedPlugin = void 0;
const base_1 = require("../builtin-plugin/base");
const options_1 = require("../container/options");
const ModuleFederationRuntimePlugin_1 = require("../container/ModuleFederationRuntimePlugin");
class ProvideSharedPlugin extends base_1.RspackBuiltinPlugin {
    constructor(options) {
        super();
        this.name = base_1.BuiltinPluginName.ProvideSharedPlugin;
        this._options = (0, options_1.parseOptions)(options.provides, item => {
            if (Array.isArray(item))
                throw new Error("Unexpected array of provides");
            const result = {
                shareKey: item,
                version: undefined,
                shareScope: options.shareScope || "default",
                eager: false
            };
            return result;
        }, item => ({
            shareKey: item.shareKey,
            version: item.version,
            shareScope: item.shareScope || options.shareScope || "default",
            eager: !!item.eager
        })).map(([key, v]) => ({ key, ...v }));
    }
    raw(compiler) {
        ModuleFederationRuntimePlugin_1.ModuleFederationRuntimePlugin.addPlugin(compiler, require.resolve("./initializeSharing.js"));
        return {
            name: this.name,
            options: this._options
        };
    }
}
exports.ProvideSharedPlugin = ProvideSharedPlugin;
