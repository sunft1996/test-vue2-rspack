import { BuiltinPluginName } from "./base";
export declare const SplitChunksPlugin: {
    new (options: {
        chunks?: RegExp | "async" | "initial" | "all" | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: import("../Module").Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        cacheGroups?: Record<string, false | {
            chunks?: RegExp | "async" | "initial" | "all" | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: import("../Module").Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            test?: string | RegExp | ((args_0: import("../Module").Module, ...args_1: unknown[]) => unknown) | undefined;
            priority?: number | undefined;
            enforce?: boolean | undefined;
            reuseExistingChunk?: boolean | undefined;
            type?: string | RegExp | undefined;
            idHint?: string | undefined;
        }> | undefined;
        maxAsyncRequests?: number | undefined;
        maxInitialRequests?: number | undefined;
        fallbackCacheGroup?: {
            chunks?: RegExp | "async" | "initial" | "all" | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
        } | undefined;
    }): {
        name: BuiltinPluginName;
        _options: import("@rspack/binding").RawSplitChunksOptions;
        raw(): import("@rspack/binding").BuiltinPlugin;
        apply(compiler: import("../Compiler").Compiler): void;
    };
};
export declare const OldSplitChunksPlugin: {
    new (options: {
        chunks?: RegExp | "async" | "initial" | "all" | undefined;
        minChunks?: number | undefined;
        name?: string | false | ((args_0: import("../Module").Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
        minSize?: number | undefined;
        maxSize?: number | undefined;
        maxAsyncSize?: number | undefined;
        maxInitialSize?: number | undefined;
        cacheGroups?: Record<string, false | {
            chunks?: RegExp | "async" | "initial" | "all" | undefined;
            minChunks?: number | undefined;
            name?: string | false | ((args_0: import("../Module").Module | undefined, ...args_1: unknown[]) => unknown) | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
            test?: string | RegExp | ((args_0: import("../Module").Module, ...args_1: unknown[]) => unknown) | undefined;
            priority?: number | undefined;
            enforce?: boolean | undefined;
            reuseExistingChunk?: boolean | undefined;
            type?: string | RegExp | undefined;
            idHint?: string | undefined;
        }> | undefined;
        maxAsyncRequests?: number | undefined;
        maxInitialRequests?: number | undefined;
        fallbackCacheGroup?: {
            chunks?: RegExp | "async" | "initial" | "all" | undefined;
            minSize?: number | undefined;
            maxSize?: number | undefined;
            maxAsyncSize?: number | undefined;
            maxInitialSize?: number | undefined;
        } | undefined;
    }): {
        name: BuiltinPluginName;
        _options: import("@rspack/binding").RawSplitChunksOptions;
        raw(): import("@rspack/binding").BuiltinPlugin;
        apply(compiler: import("../Compiler").Compiler): void;
    };
};
